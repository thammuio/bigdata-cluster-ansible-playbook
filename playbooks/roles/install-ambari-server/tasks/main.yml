---
- name: Include Variable file
  include_vars: ../../../group_vars/all.yml

- name: Load variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}.yml"
        - defaults.yml
      paths:
        - ../vars

- name: Install Ambari Server
  yum:
    name: ambari-server
    state: present
  notify: Reload systemd

- meta: flush_handlers

- block:
    - name: Install {{ database }} required packages
      package:
        name: "{{ item }}"
        update_cache: yes
        state: present
      with_items: "{{ hostvars[inventory_hostname][database + '_packages'] }}"

    - name: Load the Ambari Server mysql schema
      mysql_db:
        name: "{{ database_options.ambari_db_name }}"
        login_host: "{{ database_options.external_hostname|default(ansible_fqdn,true) }}"
        login_port: "{{ mysql_port }}"
        login_user: "{{ database_options.ambari_db_username }}"
        login_password: "{{ database_options.ambari_db_password }}"
        state: import
        target: /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql
      register: import_results
      ignore_errors: true
      when: database == "mysql" or database == "mariadb"

    - name: Fail if the mysql schema could not be loaded
      fail:
        msg: Schema could not be loaded. Error is {{ import_results.msg }}!
      when: import_results|failed and not import_results.msg|search("Table .* already exists")

    - name: Configure the Ambari JDBC driver
      shell: /usr/sbin/ambari-server setup --jdbc-db={{ database | regex_replace('mariadb', 'mysql') }} --jdbc-driver={{ hostvars[inventory_hostname][database + '_jdbc_location'] }}
      notify: Restart ambari-server

    - name: Set the Ambari Server database setup options
      set_fact:
        ambari_database_options: "--database={{ database | regex_replace('mariadb', 'mysql') }} \
                                  --databasehost={{ database_options.external_hostname|default(ansible_fqdn,true) }} \
                                  --databaseport={{ hostvars[inventory_hostname][database | regex_replace('mariadb', 'mysql') + '_port'] }} \
                                  --databasename={{ database_options.ambari_db_name }} \
                                  --databaseusername={{ database_options.ambari_db_username }} \
                                  --databasepassword={{ database_options.ambari_db_password }}"

    - name: Set the Ambari Server Java setup option (Oracle JDK)
      set_fact:
        ambari_java_options: "-j {{ oraclejdk_options.base_folder }}/latest"
      when: java == "oraclejdk"

    - name: Run Ambari Server setup
      shell: /usr/sbin/ambari-server setup -s {{ ambari_java_options|default("") }} {{ ambari_database_options|default("") }}
      notify: Restart ambari-server
  when: database != "oracle"

- block:
    
    #   shell: cat {{ ambari_ddl }} | {{ oracle_sqlplus }} '{{ database_options.ambari_db_username }}/{{ database_options.ambari_db_password }}@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(COMMUNITY=TCP)(PROTOCOL=TCP)(Host={{ database_options.external_hostname|default(ansible_fqdn,true) }})(Port={{ hostvars[inventory_hostname][database + '_port'] }})))(CONNECT_DATA=(SERVER=dedicated)(SERVICE_NAME={{ database_options.ambari_db_name }})))'
    
    - name: Configure the Ambari JDBC driver
      shell: /usr/sbin/ambari-server setup --jdbc-db={{ database }} --jdbc-driver={{ hostvars[inventory_hostname][database + '_jdbc_location'] }}
      notify: Restart ambari-server

    - name: Set the Ambari Server database setup options for Oracle
      set_fact:
        ambari_database_options: "--database={{ database }} \
                                  --databasehost={{ database_options.external_hostname|default(ansible_fqdn,true) }} \
                                  --databaseport={{ hostvars[inventory_hostname][database + '_port'] }} \
                                  --databasename={{ database_options.ambari_db_name }} \
                                  --databaseusername={{ database_options.ambari_db_username }} \
                                  --databasepassword={{ database_options.ambari_db_password }}"

    - debug: var=ambari_database_options

    - name: Set the Ambari Server Java setup option (Oracle JDK)
      set_fact:
        ambari_java_options: "-j {{ oraclejdk_options.base_folder }}/latest"
      when: java == "oraclejdk"

    - name: Run Ambari Server setup
      shell: /usr/sbin/ambari-server setup -s {{ ambari_java_options|default("") }} {{ ambari_database_options|default("") }}
      notify: Restart ambari-server
  when: database == "oracle"

- name: Increase the Ambari Server startup timeout
  lineinfile:
    dest: /etc/ambari-server/conf/ambari.properties
    state: present
    line: 'server.startup.web.timeout=120'
  notify: Restart ambari-server

- meta: flush_handlers

- name: Make sure the ambari-server service is started
  service:
    name: ambari-server
    state: started

- name: Make sure the ambari-server service is enabled
  service:
    name: ambari-server
    enabled: yes
  ignore_errors: true
